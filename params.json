{"name":"Smolder","tagline":"Simple rest smoke testing.","body":"Smolder\r\n=======\r\n[![Build Status](https://travis-ci.org/sky-shiny/smolder.svg)](https://travis-ci.org/sky-shiny/smolder)\r\n\r\n- Smoke test your rest API.\r\n- Validate response times.\r\n- Validate redirects.\r\n- Validate ssl certificates.\r\n- Validate headers.\r\n- More\r\n\r\nInstallation\r\n============\r\n\r\n```\r\npip install git+git://github.com/sky-shiny/smolder.git\r\n```\r\n\r\nExample\r\n=======\r\n\r\n```\r\n$> smolder-cli status.github.com examples/github_status.json\r\n\r\nSuccess connecting to status.github.com on port 80\r\nPreparing to execute 2 tests\r\n\r\n------------------------------------ Github Status -------------------------------\r\n                               http://status.github.com:80/\r\n----------------------------------------------------------------------------------\r\n\r\ncurl -v -s -o /dev/null -H \"User-Agent: Smolder smoke test library\"  -X GET \\\r\n\"http://status.github.com:80/\"\r\nRequest took 227ms\r\nStatus code == 301 and redirect == https://status.github.com/ ............. [PASS]\r\n\r\n------------------------------------ Github Status -------------------------------\r\n                              https://status.github.com:443/\r\n----------------------------------------------------------------------------------\r\n\r\ncurl -v -s -o /dev/null -H \"User-Agent: Smolder smoke test library\"  -X GET \\\r\n\"https://status.github.com:443/\"\r\nRequest took 541ms\r\nStatus code == 200 ........................................................ [PASS]\r\nBody contains \"All systems operational\" ................................... [PASS]\r\nResponse time was 341ms longer than 200ms max (541ms) ..................... [FAIL]\r\nFOUND 1 FAILURES IN 4 TESTS\r\n```\r\n\r\nExample [Readme](https://github.com/sky-shiny/smolder/blob/master/examples/README.md)\r\n\r\nWhat it does\r\n============\r\n\r\nIt wraps the \"requests\" python library inserting headers, authentication etc and\r\nmaking your requests to a host: provided as a command line argument.\r\n\r\nIt checks the response from the server for expected status-codes/body/header/dpath-json\r\ncontents and passes or fails the test based on definition.\r\n\r\nCan be used to specify and pass/fail on performance of api response.\r\n\r\nA copy/paste curl equivalent of the request is included in the output for\r\nconvenience.\r\n\r\nEasily introduced into a CI/CD deploy pipeline.\r\n\r\nWithout --force, any API requests that are not GET's will be skipped as a safety\r\nmechanism to ensure we're not overwriting or creating data unconciously.\r\n\r\n\r\nRequest Options\r\n===============\r\n\r\nRequest Option | Description\r\n---------------|-------------\r\nname \\* | name for the test\r\nprotocol \\* | tcp, http, https or noop\r\nport \\* | 0 - 65535\r\nurl | /url/path/to/resource.json\r\nmethod | GET, POST, PUT, DELETE, OPTION\r\nrequest_headers (recommended) |  header object to append to requests instansiation.  The host header is probably the most likely requirement.\r\nusername | basic auth username\r\npassword | basic auth password\r\ncookie | cookie object to append to requests instansiation\r\ndata | data for POST or PUT.\r\nvalidate_cert | Should we verify the ssl cert when making an https request?  Defaults to False.\r\n\r\n*: required\r\n\r\nResponse Options\r\n================\r\n\r\nResponse Test Options | Description\r\n----------------------|-----------------------------\r\nresponse_body_contains | PASS if string in body.\r\nresponse_body_doesnt_contain | FAIL if string in body.\r\nresponse_max_time_ms | FAIL if response takes longer than int.\r\nresponse_json_contains | FAIL if json response at path doesn't match.\r\nexpect_status_code | FAIL if response status code differs from int.\r\nresponse_redirect | FAIL if string not in response location header.\r\nresponse_headers | FAIL if the headers received from the request doesn't contain the list of headers provided.\r\nresponse_header_values | FAIL if the *values* of the headers in the test don't match the values in the response.\r\nshow_body | output the body to stdout.\r\n\r\nThanks\r\n======\r\n\r\nhttps://github.com/njsaunders\r\n\r\nhttps://github.com/nielsdraaisma\r\n\r\nhttps://github.com/lotia\r\n\r\nhttps://github.com/casibbald\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}